{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Orion",
  "scopeName": "source.orion",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#operators" },
    { "include": "#annotations" },
    { "include": "#variables" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.orion",
          "match": "\\b(if|else|for|while|return|break|continue|fn|match|switch|case|default|import|from|as|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.orion",
          "match": "\\b(let|const|var|class|struct|enum|interface|module|package)\\b"
        },
        {
          "name": "storage.modifier.orion",
          "match": "\\b(public|private|protected|static|final|async|await)\\b"
        },
        {
          "name": "keyword.exception.orion",
          "match": "\\b(error|panic|raise)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.orion",
          "match": "\\b(int|float|string|bool|void|list|map|char|any|object|number)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.orion",
          "match": "\\b(true|false|null|undefined)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.orion",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.orion",
              "match": "\\\\."
            },
            {
              "name": "variable.interpolation.orion",
              "match": "\\$\\{[a-zA-Z_][a-zA-Z0-9_]*\\}"
            }
          ]
        },
        {
          "name": "string.quoted.single.orion",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.orion",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.orion",
          "match": "--.*$"
        },
        {
          "name": "comment.line.double-slash.orion",
          "match": "//.*$"
        },
        {
          "name": "comment.documentation.orion",
          "match": "///.*$"
        },
        {
          "name": "comment.block.orion",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.orion",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.orion",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.hex.orion",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.orion",
          "match": "\\b0b[01]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.builtin.orion",
          "match": "\\b(print|input|len|typeof|assert|range|map|filter|reduce)\\b"
        },
        {
          "name": "entity.name.function.orion",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.orion",
          "match": "[\\+\\-\\*/%]"
        },
        {
          "name": "keyword.operator.assignment.orion",
          "match": "="
        },
        {
          "name": "keyword.operator.assignment.compound.orion",
          "match": "(\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.comparison.orion",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.orion",
          "match": "(\\&\\&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.orion",
          "match": "(\\&|\\||\\^|~|<<|>>)"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "entity.name.annotation.orion",
          "match": "@[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.orion",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
